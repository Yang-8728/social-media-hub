feat: 项目结构全面重组与标准化 - 达到专业开源标准

## 🎯 主要改进

### 📁 项目结构重组
- 移动30+历史Python文件到cleanup_old_files/目录
- 创建专业的工具目录结构：tools/setup/ 和 tools/scripts/
- 整理根目录，保持7个核心文件的简洁布局

### 📚 完善文档体系
- 为所有主要目录添加详细README.md文档
  * src/README.md - 核心源代码结构说明
  * tools/README.md - 工具脚本使用指南
  * config/README.md - 配置文件管理指南
  * docs/README.md - 文档规划和维护指南
  * data/README.md - 数据存储和管理说明
- 移动BUGFIX_UNICODE_PATHS.md到docs/目录
- 优化docs/README.md引用技术文档

### 🏷️ 开源项目标准化
- 添加MIT LICENSE开源协议
- 创建详细的CHANGELOG.md版本变更记录
- 添加完整的CONTRIBUTING.md贡献者指南
- 根目录保持README+CHANGELOG+CONTRIBUTING标准三件套

### 🔧 工具脚本重组
- 移动fix_unicode_paths.py到tools/scripts/
- 整理环境设置脚本到tools/setup/
- 移动日志查看工具到tools/scripts/
- 归档所有分析脚本到cleanup_old_files/

### 🧹 文件清理和归档
- 移动analyze_project_structure.py等分析工具
- 创建ANALYSIS_SCRIPTS_EXPLANATION.md解释分析脚本用途
- 清理根目录临时文件和重复脚本
- 优化.gitignore确保大文件正确排除

## 🏗️ 技术改进

### Unicode路径支持
- 保持fix_unicode_paths.py核心修复功能
- 继续支持双路径检测和自动文件迁移
- 维护完整的Unicode路径修复文档

### 项目配置优化
- 确认FFmpeg工具正确排除（避免260MB上传）
- 优化.gitignore配置排除所有媒体文件
- 保持requirements.txt依赖清单

## 📊 优化成果

### 根目录文件统计
- 优化前: 30+个散乱文件
- 优化后: 7个核心文件
- 减少: 75%+的根目录文件数量

### 文档完整性
- 新增5个目录README文档
- 重组技术文档到docs/目录  
- 添加3个标准开源文件

### 项目专业度
- ✅ 符合GitHub开源项目最佳实践
- ✅ 完善的贡献者指南和文档体系
- ✅ 清晰的目录结构和工具组织
- ✅ 专业的版本管理和变更记录

## 🎯 影响范围

### 用户体验
- 新开发者可快速理解项目结构
- 详细的工具使用指南和故障排除
- 清晰的贡献流程和开发规范

### 维护性
- 模块化的工具脚本组织
- 完整的历史文件归档
- 便于查找和使用的目录结构

### 项目形象
- 专业的GitHub页面展示
- 符合开源社区标准的文件布局
- 清晰的项目定位和功能说明

## 🔗 相关文件

### 新增文件
- LICENSE (MIT开源协议)
- CHANGELOG.md (版本变更记录)
- CONTRIBUTING.md (贡献者指南)
- src/README.md, tools/README.md, config/README.md, docs/README.md, data/README.md

### 移动文件
- BUGFIX_UNICODE_PATHS.md → docs/
- fix_unicode_paths.py → tools/scripts/
- 各种setup脚本 → tools/setup/
- 30+分析脚本 → cleanup_old_files/

### 更新文件
- docs/README.md (添加BUGFIX文档引用)
- .gitignore (确认大文件排除配置)

## 🚀 后续规划

此次重组为项目奠定了专业的基础架构，后续可以：
- 添加pyproject.toml现代Python配置
- 设置GitHub Actions CI/CD
- 添加Docker容器化支持
- 完善API文档和架构设计

这个版本将项目从个人脚本工具提升到了专业开源项目标准！
